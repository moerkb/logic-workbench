PROTOCOL

This file contains notes on what has been done and what needs to be done. It also 
holds important things to remember.

OPEN TASKS

- remove tautologies from cnf (open)
- tseitin symbols: increment over all symbols (atom)
- var name substitution map to dimacs
- remove tseitin symboles
- sat result: vector/set of literals (pos 0: satisfiable or not?)
- tseitin transform unit tests

- SAT4J wrapper
- visualize formula tree graphically (instaparse/visualize) 
- comparison project to: core.logic, kodkod (alloy) (e.g. Sudoku)
- resolution (alternative to sat solving)
- natural deduction

QUESTIONS

- zeros with dimacs - when to add? - when producing file, not before
- Is it a good idea to remove tautologies from cnf? (runtime: remove or leave to sat solver?)
- Remove tautologies from
	(and (or a (not a))) => (and) ???
	(or a (not a)) => ???
- (transform-cnf '(or A B)) produces (or A B) => hot fix or mistake in algorithm?

NOTES

- Printing a truth table is reasonable only for a number of vars up to 12, limiting to 10
- David Nolen, 'Architecture of core.logic'
- only 'and' and 'or' are n-ary, all other operators binary
- Basicfunctions must not be changed from macros to functions as cnf transformation
  would not work anymore (works with macroexpand).
- RSyntaxRichTextArea
- MPA: no own macro processor
  idea: 
    Input "human" code 
    -> Clj-Button 
    -> show clojure code
    -> start REPL (autoload generated code) 
    -> do something...
    -> save (in REPL)
- Queens problem for (n = 2) (must be false for all):
	(a1 -> (!b1 and !a2 and !b2))
	and 
	(a2 -> (!b1 and !b2 and !a1))
	and
	(b1 -> (!a1 and !a2 and !b2))
	and
	(b2 -> (!a1 and !a2 and !b1))
	and
	(a1 or b1)
	and
	(a2 or b2)
	and
	(a1 or a2)
	and
	(b1 or b2)
