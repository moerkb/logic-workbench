/** --------------------------------------------------------------------------
 * Grammar for Propositions
 * @author Matthias Peter
 * 
 * Copyright (c) 2007 
 * by Fachhochschule Gie�en-Friedberg University of Applied Sciences.
 * 
 * mpa is free software; you can redistribute it and/or modify it under 
 * the terms of the GNU General Public License as published by the Free 
 * Software Foundation; either version 2 of the License, or (at your option) 
 * any later version.
 *  
 * mpa is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for 
 * more details. 
 * 
 * You should have received a copy of the GNU General Public License along 
 * with this program; if not, write to the Free Software Foundation, Inc., 
 * 51 Franklin St, Fifth Floor, Boston, MA 02110, USA
 * --------------------------------------------------------------------------
 * $Id:MpaParser.jjt 112 2007-02-06 09:59:22Z br $
 * --------------------------------------------------------------------------
 */

options {
  NODE_PREFIX 	= "Mpa";
  MULTI			=	true;
  VISITOR		= true;
  STATIC		= true;
}

PARSER_BEGIN(MpaParser)

package mpa.cst.parser;

public class MpaParser {
}

PARSER_END(MpaParser)

SKIP : /* ignore white spaces and comments */
{
    " "
  | "\t"
  | "\n"
  | "\r"
  | <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
  | <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}



TOKEN : 	
{
    < LPAREN: "(" >
  | < RPAREN: ")" >
  | < LBRACKET: "[" >
  | < RBRACKET: "]" >
}

TOKEN :		/* Constants */
{
	  < TRUE: "T" | "1" | "True" >
	| < FALSE : "F" | "0" | "False" >
}

TOKEN : 	/* Unary operators */
{
 	< NOT: "!" | "not" >
}

/**
 * Precedence of binary operators
 *
 * prec operator     assoc
 * high AND, NAND    left
 *      OR, NOR      left
 *      IF, NIF      right
 *      IMPL, NIMPL  right
 * low  IFF, XOR     left
 */
 
TOKEN :		/* Binary operators */
{
	  < AND:   "&"	 | "and"   >
	| < NAND:  "!&"  | "nand"  >
	| < OR:	   "|"   | "or"    >
	| < NOR:   "!|"  | "nor"   >
	| < IF:	   "<-"  | "if"    >
	| < NIF:           "nif"   >
	| < IMPL:  "->"  | "impl"  >
	| < NIMPL:         "nimpl" >
	| < IFF:   "<->" | "iff"   >
	| < XOR:   "^"   | "xor"   >
}

TOKEN : 
{
      < ATOM: (<LETTER>|<SPECIAL>) (<LETTER>|<SPECIAL>|<DIGIT>)* >
    | < #LETTER:  ["a"-"z", "ä", "ö", "ü", "ß", "A"-"Z", "Ä", "Ö", "Ü"] >
    | < #SPECIAL: ["_", "{", "}", ".", "\\"] >
    | < #DIGIT:   ["0"-"9"] >
}


MpaStart Start() : 
{}
{
	IffExpr() <EOF> { return jjtThis; }
}


void IffExpr() #void : /* left assoc */
{ 
	Token t; 
}
{
		ImplExpr() #IffExpr(>1)
	( ( t = <IFF> | t = <XOR> ) 
			ImplExpr() { jjtThis.setOp( t.kind );	} #IffExpr(2) )* 
}

/* 
 * TODO: improve parser
 * Don't know how to avoid unnecessary intermediate nodes
 * in right associative productions
 */
void ImplExpr() : /* right assoc */
{
	Token t;
}
{
		IfExpr() 
	( ( t = <IMPL> | t = <NIMPL> )  
			ImplExpr() { jjtThis.setOp( t.kind );	} )?
}

void IfExpr() : /* right assoc */
{
	Token t;
}
{
		OrExpr() 
	( ( t = <IF> | t = <NIF> )
		 	IfExpr() { jjtThis.setOp( t.kind ); } )?	
}

void OrExpr() #void :	/* left assoc */
{
	Token t;
}
{
		AndExpr() #OrExpr(>1)
	( ( t = <OR> | t = <NOR> ) 
			AndExpr() {	jjtThis.setOp( t.kind ); } #OrExpr(2) )*
}

void AndExpr() #void :	/* left assoc */
{
	Token t;
}
{
		UnExpr() #AndExpr(>1)
	( ( t = <AND> | t = <NAND> ) 
			UnExpr() { jjtThis.setOp( t.kind ); } #AndExpr(2) )*
}

void UnExpr() #void :
{}
{
		NotExpr()
	| SubExpr ()
}

void NotExpr() :
{}
{		<NOT> UnExpr() {
			jjtThis.setOp( NOT );
		}
}

void SubExpr() :
{}
{
	 Atom()
	| <TRUE>  { jjtThis.setLexeme( "TRUE" ); } 
	| <FALSE> { jjtThis.setLexeme( "FALSE" ); }
	| <LPAREN> IffExpr() <RPAREN> { jjtThis.setLexeme( "PAREN" ); }
	| <LBRACKET> IffExpr() <RBRACKET> { jjtThis.setLexeme( "PAREN" ); }
}

void Atom() :
{
	Token t;
}
{
	t = <ATOM> { jjtThis.setLexeme( t.image ); }
}

