/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. D:/usr/br/workspace/mic/src/mic/parser/MicParser.jj */
/*@egen*//** --------------------------------------------------------------------------
 * Grammar for Integer Expressions
 * 
 * Copyright (c) 2008 
 * by Fachhochschule Gie\u00dfen-Friedberg University of Applied Sciences.
 * 
 * mip is free software; you can redistribute it and/or modify it under 
 * the terms of the GNU General Public License as published by the Free 
 * Software Foundation; either version 2 of the License, or (at your option) 
 * any later version.
 *  
 * mip is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for 
 * more details. 
 * 
 * You should have received a copy of the GNU General Public License along 
 * with this program; if not, write to the Free Software Foundation, Inc., 
 * 51 Franklin St, Fifth Floor, Boston, MA 02110, USA
 * --------------------------------------------------------------------------
 * $Id:MpaParser.jjt 112 2007-02-06 09:59:22Z br $
 * --------------------------------------------------------------------------
 */

options {                                                                            
  STATIC		     = false;
}

PARSER_BEGIN(MicParser)

package mic.parser;

public class MicParser/*@bgen(jjtree)*/implements MicParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTMicParserState jjtree = new JJTMicParserState();

/*@egen*/
}

PARSER_END(MicParser)

SKIP : /* ignore white spaces and comments */
{
    " "
  | "\t"
  | "\n"
  | "\r"
}


TOKEN :
{
    < LPAREN: "(" >
  | < RPAREN: ")" >
}


/**
 * Unary operators
 * + sign  
 * - sign
 * ~ bitwise negation
 * ! logical negation

/**
 * Precedence of binary operators
 *
 * prec operator        assoc
 * high POWER    		    right
 *      MUL, DIV, MOD   left
 *      PLUS, MINUS     left
 *      LSHIFT, RSHIFT  left
 *      LT, GT, LE, GE  left
 *      EG, NE          left
 *      BAND            left
 *      BXOR            left
 *      BOR             left
 *      LAND            left
 * low  LOR             left
 */
 
TOKEN :	 /* Operators */
{
	  < PLUS:   "+" >
	| < MINUS:  "-" >
	| < BNEG:	  "~" >
	| < LNEG:   "!" >
	| < POWER:  "**" >
	| < MUL:    "*" >
	| < DIV:    "/" >
	| < MOD:    "%" >
	| < LSHIFT: "<<" >
	| < RSHIFT: ">>" >
	| < LT:     "<" >
	| < GT:     ">" >
	| < LE:     "<=" >
	| < GE:     ">=" >
	| < EQ:     "==" >
	| < NE:     "!=" >
	| < BAND:   "&" >
	| < BXOR:   "^" >
	| < BOR:    "|" >
	| < LAND:   "&&" >
	| < LOR:    "||" >
}

TOKEN : /* Operators -- not supported */
{
	  < INCR:   "++" >
	| < DECR:   "--" >  
}

TOKEN : 
{
	< INT_LITERAL: 
	  <DEC_LITERAL> | <HEX_LITERAL> | <OCT_LITERAL>
	>  
  | < #DEC_LITERAL: ["1"-"9"] (["0"-"9"])* >
  | < #HEX_LITERAL: "0" ["x","X"](["0"-"9","a"-"f","A"-"F"])+ >
  | < #OCT_LITERAL: "0" (["0"-"7"]) * >
}


MicStart Start() : 
{/*@bgen(jjtree) Start */
  MicStart jjtn000 = new MicStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
        try {
/*@egen*/
	Expression() <EOF>/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Expression()       :
{}
{
  LOrExpression() 
}    

void LOrExpression()       :
{}
{/*@bgen(jjtree) #LOrExpression(> 1) */
  {
    MicLOrExpression jjtn001 = new MicLOrExpression(JJTLOREXPRESSION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  LAndExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
  	( <LOR>/*@bgen(jjtree) #LOrExpression( 2) */
                {
                  MicLOrExpression jjtn002 = new MicLOrExpression(JJTLOREXPRESSION);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                }
                try {
/*@egen*/ LAndExpression()/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002,  2);
                  }
                }
/*@egen*/ )*
  
}    

void LAndExpression()       :
{}
{/*@bgen(jjtree) #LAndExpression(> 1) */
        {
          MicLAndExpression jjtn001 = new MicLAndExpression(JJTLANDEXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	BOrExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
		( <LAND>/*@bgen(jjtree) #LAndExpression( 2) */
                         {
                           MicLAndExpression jjtn002 = new MicLAndExpression(JJTLANDEXPRESSION);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
                         }
                         try {
/*@egen*/ BOrExpression()/*@bgen(jjtree)*/
                         } catch (Throwable jjte002) {
                           if (jjtc002) {
                             jjtree.clearNodeScope(jjtn002);
                             jjtc002 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte002 instanceof RuntimeException) {
                             throw (RuntimeException)jjte002;
                           }
                           if (jjte002 instanceof ParseException) {
                             throw (ParseException)jjte002;
                           }
                           throw (Error)jjte002;
                         } finally {
                           if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002,  2);
                           }
                         }
/*@egen*/ )*
}

void BOrExpression()       :
{}
{/*@bgen(jjtree) #BOrExpression(> 1) */
        {
          MicBOrExpression jjtn001 = new MicBOrExpression(JJTBOREXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	BXorExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/ 
		( <BOR>/*@bgen(jjtree) #BOrExpression( 2) */
                        {
                          MicBOrExpression jjtn002 = new MicBOrExpression(JJTBOREXPRESSION);
                          boolean jjtc002 = true;
                          jjtree.openNodeScope(jjtn002);
                        }
                        try {
/*@egen*/ BXorExpression()/*@bgen(jjtree)*/
                        } catch (Throwable jjte002) {
                          if (jjtc002) {
                            jjtree.clearNodeScope(jjtn002);
                            jjtc002 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte002 instanceof RuntimeException) {
                            throw (RuntimeException)jjte002;
                          }
                          if (jjte002 instanceof ParseException) {
                            throw (ParseException)jjte002;
                          }
                          throw (Error)jjte002;
                        } finally {
                          if (jjtc002) {
                            jjtree.closeNodeScope(jjtn002,  2);
                          }
                        }
/*@egen*/ )*
}

void BXorExpression()       : 
{}
{/*@bgen(jjtree) #BXorExpression(> 1) */
        {
          MicBXorExpression jjtn001 = new MicBXorExpression(JJTBXOREXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	BAndExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/ 
		( <BXOR>/*@bgen(jjtree) #BXorExpression( 2) */
                         {
                           MicBXorExpression jjtn002 = new MicBXorExpression(JJTBXOREXPRESSION);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
                         }
                         try {
/*@egen*/ BAndExpression()/*@bgen(jjtree)*/
                         } catch (Throwable jjte002) {
                           if (jjtc002) {
                             jjtree.clearNodeScope(jjtn002);
                             jjtc002 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte002 instanceof RuntimeException) {
                             throw (RuntimeException)jjte002;
                           }
                           if (jjte002 instanceof ParseException) {
                             throw (ParseException)jjte002;
                           }
                           throw (Error)jjte002;
                         } finally {
                           if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002,  2);
                           }
                         }
/*@egen*/ )*
}

void BAndExpression()       : 
{}
{/*@bgen(jjtree) #BAndExpression(> 1) */
        {
          MicBAndExpression jjtn001 = new MicBAndExpression(JJTBANDEXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
 	EqualExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
 		( <BAND>/*@bgen(jjtree) #BAndExpression( 2) */
                         {
                           MicBAndExpression jjtn002 = new MicBAndExpression(JJTBANDEXPRESSION);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
                         }
                         try {
/*@egen*/ EqualExpression()/*@bgen(jjtree)*/
                         } catch (Throwable jjte002) {
                           if (jjtc002) {
                             jjtree.clearNodeScope(jjtn002);
                             jjtc002 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte002 instanceof RuntimeException) {
                             throw (RuntimeException)jjte002;
                           }
                           if (jjte002 instanceof ParseException) {
                             throw (ParseException)jjte002;
                           }
                           throw (Error)jjte002;
                         } finally {
                           if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002,  2);
                           }
                         }
/*@egen*/ )*
}

void EqualExpression()       :
{
	Token t;
}
{/*@bgen(jjtree) #EqualExpression(> 1) */
        {
          MicEqualExpression jjtn001 = new MicEqualExpression(JJTEQUALEXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	RelationalExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/  
		( ( t = <EQ> | t = <NE> ) 
				RelationalExpression()/*@bgen(jjtree) #EqualExpression( 2) */
                                        {
                                          MicEqualExpression jjtn002 = new MicEqualExpression(JJTEQUALEXPRESSION);
                                          boolean jjtc002 = true;
                                          jjtree.openNodeScope(jjtn002);
                                        }
                                        try {
/*@egen*//*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn002,  2);
                                          jjtc002 = false;
                                        }
/*@egen*/ 
					{ jjtn002.setOp( t.kind ); }/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc002) {
                                            jjtree.closeNodeScope(jjtn002,  2);
                                          }
                                        }
/*@egen*/ )*
}

void RelationalExpression()       :
{
	Token t;
}
{/*@bgen(jjtree) #RelationalExpression(> 1) */
        {
          MicRelationalExpression jjtn001 = new MicRelationalExpression(JJTRELATIONALEXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	ShiftExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
		( ( t = <LT> | t = <GT> | t = <LE> | t = <GE> ) 
		 		ShiftExpression()/*@bgen(jjtree) #RelationalExpression( 2) */
                                        {
                                          MicRelationalExpression jjtn002 = new MicRelationalExpression(JJTRELATIONALEXPRESSION);
                                          boolean jjtc002 = true;
                                          jjtree.openNodeScope(jjtn002);
                                        }
                                        try {
/*@egen*//*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn002,  2);
                                          jjtc002 = false;
                                        }
/*@egen*/
					{ jjtn002.setOp( t.kind ); }/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc002) {
                                            jjtree.closeNodeScope(jjtn002,  2);
                                          }
                                        }
/*@egen*/ )*
}		

void ShiftExpression()       :
{
	Token t;
}
{/*@bgen(jjtree) #ShiftExpression(> 1) */
        {
          MicShiftExpression jjtn001 = new MicShiftExpression(JJTSHIFTEXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	AdditiveExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
		( ( t = <LSHIFT> | t = <RSHIFT> ) 
			AdditiveExpression()/*@bgen(jjtree) #ShiftExpression( 2) */
                                        {
                                          MicShiftExpression jjtn002 = new MicShiftExpression(JJTSHIFTEXPRESSION);
                                          boolean jjtc002 = true;
                                          jjtree.openNodeScope(jjtn002);
                                        }
                                        try {
/*@egen*//*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn002,  2);
                                          jjtc002 = false;
                                        }
/*@egen*/ 
					{ jjtn002.setOp( t.kind ); }/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc002) {
                                            jjtree.closeNodeScope(jjtn002,  2);
                                          }
                                        }
/*@egen*/ )*
}

void AdditiveExpression()       :
{
	Token t;
}
{/*@bgen(jjtree) #AdditiveExpression(> 1) */
        {
          MicAdditiveExpression jjtn001 = new MicAdditiveExpression(JJTADDITIVEEXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	MultiplicativeExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
		( ( t = <PLUS> | t = <MINUS> ) 
			MultiplicativeExpression()/*@bgen(jjtree) #AdditiveExpression( 2) */
                                        {
                                          MicAdditiveExpression jjtn002 = new MicAdditiveExpression(JJTADDITIVEEXPRESSION);
                                          boolean jjtc002 = true;
                                          jjtree.openNodeScope(jjtn002);
                                        }
                                        try {
/*@egen*//*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn002,  2);
                                          jjtc002 = false;
                                        }
/*@egen*/
					{ jjtn002.setOp( t.kind ); }/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc002) {
                                            jjtree.closeNodeScope(jjtn002,  2);
                                          }
                                        }
/*@egen*/ )*
}

void MultiplicativeExpression()       :
{
	Token t;
}
{/*@bgen(jjtree) #MultiplicativeExpression(> 1) */
 {
   MicMultiplicativeExpression jjtn001 = new MicMultiplicativeExpression(JJTMULTIPLICATIVEEXPRESSION);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
 }
 try {
/*@egen*/
 PowerExpression()/*@bgen(jjtree)*/
 } catch (Throwable jjte001) {
   if (jjtc001) {
     jjtree.clearNodeScope(jjtn001);
     jjtc001 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte001 instanceof RuntimeException) {
     throw (RuntimeException)jjte001;
   }
   if (jjte001 instanceof ParseException) {
     throw (ParseException)jjte001;
   }
   throw (Error)jjte001;
 } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
   }
 }
/*@egen*/
		( ( t = <MUL> | t = <DIV> | t = <MOD> ) 
			PowerExpression()/*@bgen(jjtree) #MultiplicativeExpression( 2) */
                                        {
                                          MicMultiplicativeExpression jjtn002 = new MicMultiplicativeExpression(JJTMULTIPLICATIVEEXPRESSION);
                                          boolean jjtc002 = true;
                                          jjtree.openNodeScope(jjtn002);
                                        }
                                        try {
/*@egen*//*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn002,  2);
                                          jjtc002 = false;
                                        }
/*@egen*/
					{ jjtn002.setOp( t.kind ); }/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc002) {
                                            jjtree.closeNodeScope(jjtn002,  2);
                                          }
                                        }
/*@egen*/ )*
}

void PowerExpression()       :
{}
{/*@bgen(jjtree) #PowerExpression(> 2) */
        {
          MicPowerExpression jjtn001 = new MicPowerExpression(JJTPOWEREXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
 	UnaryExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 2);
          }
        }
/*@egen*/
 		( <POWER>/*@bgen(jjtree) #PowerExpression( 2) */
                          {
                            MicPowerExpression jjtn002 = new MicPowerExpression(JJTPOWEREXPRESSION);
                            boolean jjtc002 = true;
                            jjtree.openNodeScope(jjtn002);
                          }
                          try {
/*@egen*/ PowerExpression()/*@bgen(jjtree)*/
                          } catch (Throwable jjte002) {
                            if (jjtc002) {
                              jjtree.clearNodeScope(jjtn002);
                              jjtc002 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte002 instanceof RuntimeException) {
                              throw (RuntimeException)jjte002;
                            }
                            if (jjte002 instanceof ParseException) {
                              throw (ParseException)jjte002;
                            }
                            throw (Error)jjte002;
                          } finally {
                            if (jjtc002) {
                              jjtree.closeNodeScope(jjtn002,  2);
                            }
                          }
/*@egen*/ )?
}

void UnaryExpression()      :
{
	Token t;
}
{ UnarySimpleExpression() 
	|
	( t = <PLUS> | t = <MINUS> | t = <BNEG> | t = <LNEG> )
		UnaryExpression()/*@bgen(jjtree) #UnaryExpression( 1) */
                                        {
                                          MicUnaryExpression jjtn001 = new MicUnaryExpression(JJTUNARYEXPRESSION);
                                          boolean jjtc001 = true;
                                          jjtree.openNodeScope(jjtn001);
                                        }
                                        try {
/*@egen*//*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn001,  1);
                                          jjtc001 = false;
                                        }
/*@egen*/
					{ jjtn001.setOp( t.kind ); }/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc001) {
                                            jjtree.closeNodeScope(jjtn001,  1);
                                          }
                                        }
/*@egen*/
}	

void UnarySimpleExpression()       :
{}
{
	  Integer() 
	| <LPAREN> Expression() <RPAREN>  
}

void Integer() :
{/*@bgen(jjtree) Integer */
        MicInteger jjtn000 = new MicInteger(JJTINTEGER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) Integer */
        try {
/*@egen*/
	t = <INT_LITERAL>/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/ { jjtn000.setLexeme( t.image ); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
