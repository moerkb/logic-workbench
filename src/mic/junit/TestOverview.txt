
Overview Test of mic
$$Id: TestOverview.txt 646 2008-09-21 12:21:58Z mgutenbrunner $$

PlusTest: operator +
  001: 3 + 4
  002: 0 + 0
  003: -0 + -0
  004: -0 + 0
  005: 0 + -0
  006: 0 + -1
  007: -1 + 0
  008: 0 + 1
  009: 1 + 0
  010: 0 + 2
  011: 2 + 0
  012: 2 + 1
  013: 2 + -1
  014: 2 + -4
  015: 2 + -3
  016: -2 + 1
  017: -2 + 2
  018: -2 + 3
  019: MAX_VALUE + 1
  020: [MAX_VALUE - 1] + 1
  021: MAX_VALUE + 2
  022: (removed (identical to 21))
  023 to 030: (moved to SyntaxTest) (handling of spaces)
  031: 10 + 3 + 7
  032: 10 + 3 + -7
  033: 10 + -3 + 7
  034: 10 + -3 + -7
  035: -10 + 3 + 7
  036: -10 + 3 + -7
  037: -10 + -3 + 7
  038: -10 + -3 + -7
  039: 10 + (3 + 7)
  040: 10 + -(3 + 7)
  041: (10 + 3) + 7
  042: -(10 + 3) + 7
  
MinusTest: operator -
  001: 3 - 4
  002: 4 - 3
  003: 0 - 0
  004: -0 - -0
  005: +0 - +0
  006: 0 - +1
  007: 1 - -3
  008: -1 - 3
  009: -1 - -3
  010: 4 - 3
  011: 1 - 0
  012: 0 - 3
  013: 3 - 3
  014: (removed (identical to 010))
  015: MIN_VALUE - 1
  016: [MIN_VALUE + 1] - 1
  017: MIN_VALUE - 2
  018 to 025: (moved to SyntaxTest 001 to 008) (handling of spaces)
  026: 12 - 7 -3
  027: 12 - 7 -10
  028: 7 - 12 -3
  029: 12 - 7 - -3
  030: 12 - -7 - 3
  031: 12 - -7 - -3
  031: -12 - 7 - 3
  032: -12 - 7 - -3
  033: -12 - -7 - 3
  034: -12 - -7 - -3
  035: 12 - (7 - 3)
  036: 12 - (3 - 7)
  037: (12 - 7) - 3
  038: (7 - 12) - 3
  039: -(12 - 7) - 3
  040: 12 - -(7 - 3)
  
MulTest: operator *
  001: 0 * 0
  002: 5 * 0
  003: 5 * -0
  004: -5 * 0
  005: 5 * 1
  006: 5 * -1
  007: -5 * 1
  008: 0 * 5
  009: -0 * 5
  010: 0 * -5
  011: 1 * 5
  012: -1 * 5
  013: 1 * -5
  014: 3 * 7
  015: -3 * 7
  016: 3 * -7
  017: -3 * -7
  018: 46341 * 46341 (look at "Mul018Calculation.txt")
  019: 46340 * 46340
  020: MAX_VALUE * 1
  021: 1 * MAX_VALUE
  022: [MAX_VALUE + 1] * 1 ("NumberFormatException" expected)
  023: 3 * 5 * 2
  024: 3 * 5 * -2
  025: 3 * -5 * 2
  026: 3 * -5 * -2
  027: -3 * 5 * 2
  028: -3 * 5 * -2
  029: -3 * -5 * 2
  030: -3 * -5 * -2
  031: 3 * 5 * 0
  032: 3 * 0 * 2
  033: 0 * 5 * 2
  034: 3 * (5 * 2)
  035: 3 * (5 * -2)
  036: 3 * (-5 * 2)
  037: 3 * (-5 * -2)
  038: 3 * -(5 * 2)
  039: 3 * -(5 * -2)
  040: 3 * -(-5 * 2)
  041: 3 * -(-5 * -2)
  042: (3 * 5) * 2
  043: (3 * -5) * 2
  044: (-3 * 5) * 2
  045: (-3 * -5) * 2
  046: -(3 * 5) * 2
  047: -(3 * -5) * 2
  048: -(-3 * 5) * 2
  049: -(-3 * -5) * 2
  050: (3 * 5 * 2)
  051: -(3 * 5 * 2)
  
DivTest: operator /
  001: 0 / 0
  002: 5 / 0
  003: 0 / -0
  004: 5 / -0
  005: 0 / 1
  006: 0 / 5
  007: -0 / 5
  008: 0 / -5
  009: -0 / -5
  010: 2 / 5
  011: -2 /5
  012: 2 / -5
  013: -2 / -5
  014: 8 / 2
  015: -8 / 2
  016: 8 / -2
  017: -8 / -2
  018: 5 / 2
  019: -5 / 2
  020: 5 / -2
  021: -5 / -2
  022: 7 / 7
  023: -7 / 7
  024: 7 / -7
  025: -7 / -7
  026: MAX_VALUE / 1
  027: MAX_VALUE / 2
  028: 25 / 3 / 3
  029: 25 / 3 / -3
  030: 25 / -3 / 3
  031: 25 / -3 / -3
  032: -25 / 3 / 3
  033: -25 / 3 / -3
  034: -25 / -3 / 3
  035: -25 / -3 / -3
  036: 0 / 3 / 3
  037: 25 / 0 / 3
  038: 25 / 3 / 0
  
ModTest: operator %
  001: 0 % 0
  002: 0 % 1
  003: 0 % 3
  004: 1 % 0
  005: 1 % 1
  006: 1 % 3
  007: 3 % 0
  008: 3 % 1
  009: 3 % 3
  010: 3 % 5
  011: 5 % 3
  012: 32 % 10
  013: 37 % 10 % 4
  014: 37 % 4 % 10
  015: 4 % 37 % 10
  016: 4 % 10 % 37
  017: 10 % 5 % 7
  018: 5 % -3  (for negative operands look at: Java Language Specification 15.17.3 Remainder Operator %)
  019: -5 % 3
  020: -5 % -3
  021: 37 % 10 % -4
  022: 37 % -10 % 4
  023: 37 % -10 % -4
  024: -37 % 10 % 4
  025: -37 % 10 % -4
  026: -37 % -10 % 4
  027: -37 % -10 % -4
  028: 37 % (10 % 4)
  029: 37 % (10 % -4)
  030: 37 % (-10 % 4)
  031: 37 % (-10 % -4)
  032: -37 % (10 % 4)
  033: -37 % (10 % -4)
  034: -37 % (-10 % 4)
  035: -37 % (-10 % -4)
  036: (37 % 10) % 4
  037: (-37 % 10) % 4
  038: -(37 % 10) % 4
  039: -(-37 % 10) % 4
  
LtTest: operator <
  001: 0 < 0
  002: 0 < 1
  003: 0 < 5
  004: 1 < 0
  005: 1 < 1
  006: 1 < 5
  007: 5 < 0
  008: 5 < 1
  009: 5 < 5
  010: 5 < 7
  011: 0 < -0
  012: -0 < 0
  013: 0 < -1
  014: -1 < 0
  015: 1 < -1
  016: -1 < 1
  017: 1 < -5
  018: -5 < 1
  019: -5 < -1
  020: -5 < 5
  021: -5 < -5
  022: 1 < 5 < 4
  023: (1 < 5) < 4
  024: 1 < (5 < 4)
  025: 1 < -5 < 4
  
GtTest: operator >
  001: 0 > 0
  002: 0 > 1
  003: 0 > 5
  004: 1 > 0
  005: 1 > 1
  006: 1 > 5
  007: 5 > 0
  008: 5 > 1
  009: 5 > 5
  010: 7 > 5
  011: 0 > -0
  012: -0 > 0
  013: 0 > -1
  014: -1 > 0
  015: 1 > -1
  016: -1 > 1
  017: 1 > -5
  018: -5 > 1
  019: -5 > -1
  020: -5 > 5
  021: 5 > -5
  022: -5 > -5
  023: 1 > 5 > 5
  024: (1 > 5) > 5
  025: 1 > (5 > 5)
  026: 1 > -5 > 4 
  
LeTest: operator <=
  001: 0 <= 0
  002: 0 <= 1
  003: 0 <= 5
  004: 1 <= 0
  005: 1 <= 1
  006: 1 <= 5
  007: 5 <= 0
  008: 5 <= 1
  009: 5 <= 5
  010: 5 <= 7
  011: 0 <= -0
  012: -0 <= 0
  013: 0 <= -1
  014: -1 <= 0
  015: 1 <= -1
  016: -1 <= 1
  017: 1 <= -5
  018: -5 <= 1
  019: -5 <= -1
  020: -5 <= 5
  021: -5 <= -5
  022: 1 <= 5 <= 4
  023: (1 <= 5) <= 4
  024: 1 <= (5 <= 4)
  025: 3 <= -5 <= 4
  
EqTest: operator ==
  001: -3 == -3
  002: -3 == -1
  003: -3 == 0
  004: -3 == 1
  005: -3 == 3
  006: -1 == -3
  007: -1 == -1
  008: -1 == 0
  009: -1 == 1
  010: -1 == 3
  011: 0 == -3
  012: 0 == -1
  013: 0 == 0
  014: 0 == 1
  015: 0 == 3
  016: 1 == -3
  017: 1 == -1
  018: 1 == 0
  019: 1 == 1
  020: 1 == 3
  021: 3 == -3
  022: 3 == -1
  023: 3 == 0
  024: 3 == 1
  025: 3 == 3
  026: 0 == -0
  027: -0 == 0
  028: -0 == -0
  029: 1 == 4 == 4
  030: (1 == 4) == 4
  031: 1 == (4 == 4)
  032: 4 == 4 == 1
  033: (4 == 4) == 1
  034: 4 == (4 == 1)
  
NeTest: operator !=
  001: -3 != -3
  002: -3 != -1
  003: -3 != 0
  004: -3 != 1
  005: -3 != 3
  006: -1 != -3
  007: -1 != -1
  008: -1 != 0
  009: -1 != 1
  010: -1 != 3
  011: 0 != -3
  012: 0 != -1
  013: 0 != 0
  014: 0 != 1
  015: 0 != 3
  016: 1 != -3
  017: 1 != -1
  018: 1 != 0
  019: 1 != 1
  020: 1 != 3
  021: 3 != -3
  022: 3 != -1
  023: 3 != 0
  024: 3 != 1
  025: 3 != 3
  026: 0 != -0
  027: -0 != 0
  028: -0 != -0
  029: 0 != 4 != 4
  030: (0 != 4) != 4
  031: 0 != (4 != 4)
  032: 4 != 4 != 0
  033: (4 != 4) != 0
  034: 4 != (4 != 0)
  
GeTest: operator >=
  001: 0 >= 0
  002: 0 >= 1
  003: 0 >= 5
  004: 1 >= 0
  005: 1 >= 1
  006: 1 >= 5
  007: 5 >= 0
  008: 5 >= 1
  009: 5 >= 5
  010: 5 >= 7
  011: 0 >= -0
  012: -0 >= 0
  013: 0 >= -1
  014: -1 >= 0
  015: 1 >= -1
  016: -1 >= 1
  017: 1 >= -5
  018: -5 >= 1
  019: -5 >= -1
  020: -5 >= 5
  021: -5 >= -5
  022: 4 >= 1 >= 5
  023: (4 >= 1) >= 5
  024: 4 >= (1 >= 5)
  025: 4 >= -5 >= 5
  
LandTest: operator &&
  001: -3 && -3
  002: -3 && -1
  003: -3 && 0
  004: -3 && 1
  005: -3 && 3
  006: -1 && -3
  007: -1 && -1
  008: -1 && 0
  009: -1 && 1
  010: -1 && 3
  011: 0 && -3
  012: 0 && -1
  013: 0 && 0
  014: 0 && 1
  015: 0 && 3
  016: 1 && -3
  017: 1 && -1
  018: 1 && 0
  019: 1 && 1
  020: 1 && 3
  021: 3 && -3
  022: 3 && -1
  023: 3 && 0
  024: 3 && 1
  025: 3 && 3
  026: 0 && -0
  027: -0 && 0
  028: -0 && -0
  029: 1 && 1 && 1
  030: 1 && 1 && 0
  031: 1 && 0 && 1
  032: 0 && 1 && 1
  
LorTest: operator ||
  001: -3 || -3
  002: -3 || -1
  003: -3 || 0
  004: -3 || 1
  005: -3 || 3
  006: -1 || -3
  007: -1 || -1
  008: -1 || 0
  009: -1 || 1
  010: -1 || 3
  011: 0 || -3
  012: 0 || -1
  013: 0 || 0
  014: 0 || 1
  015: 0 || 3
  016: 1 || -3
  017: 1 || -1
  018: 1 || 0
  019: 1 || 1
  020: 1 || 3
  021: 3 || -3
  022: 3 || -1
  023: 3 || 0
  024: 3 || 1
  025: 3 || 3
  026: 0 || -0
  027: -0 || 0
  028: -0 || -0
  029: 0 || 0 || 0
  030: 0 || 0 || 1
  031: 0 || 1 || 0
  032: 1 || 0 || 0
  
LnegTest: operator !
  001: ! 0
  002: ! -0
  003: ! 1
  004: ! -1
  005: ! 3
  006: ! -3
  007: ! ! 0
  008: ! ! 1
  
PowerTest: operator **
  001: 0**0
  002: 0**-0
  003: -0**0
  004: -0**-0
  005: 0**1
  006: 0**-1
  007: -0**1
  008: -0**-1
  009: 0**5
  010: 0**-5
  011: 1**0
  012: 1**-0
  013: 1**1
  014: 1**-1
  015: 1**5
  016: 1**-5
  017: 5**0
  018: 5**-0
  019: 5**1
  020: 5**-1
  021: 5**3
  022: 5**-3
  023: -0**5
  024: -0**-5
  025: -1**0
  026: -1**-0
  027: -1**1
  028: -1**-1
  029: -1**-5
  030: -1**4
  031: -1**-5
  032: -5**0
  033: -5**-0
  034: -5**1
  035: -5**-1
  036: -5**3
  037: -5**4
  038: -5**-3
  039: 0**0**0
  040: 0**0**-0
  041: 0**0**1
  042: 0**0**-1
  043: 0**0**3
  044: 0**0**-3
  045: 0**1**0
  046: 0**1**-0
  047: 0**1**1
  048: 0**1**-1
  049: 0**1**3
  050: -removed (equal to 049)-
  051: 0**1**-3
  052: 0**-1**0
  053: 0**-1**-0
  054: 0**-1**1
  055: 0**-1**-1
  056: 0**-1**2
  057: 0**-1**3
  058: 0**-1**-3
  059: 0**3**1
  060: 0**3**1
  061: 0**3**-1
  062: 0**3**3
  063: 0**3**-3
  064: 0**-3**0
  065: 0**-3**1
  066: 0**-3**-1
  067: 0**-3**2
  068: 0**-3**3
  069: 0**-3**-3
  
BnegTest: operator ~
  001: ~0
  002: ~ -1
  003: ~1
  004: ~ -2
  005: ~5
  006: ~-6
  007: ~MAX_VALUE
  008: ~MIN_VALUE
  009: ~~5
  
BandTest: operator &
  001: 0 & 0
  002: 0 & 4
  003: 4 & 0
  004: 4 & 2
  005: 2 & 4
  006: 5 & 3
  007: 3 & 5
  008: 11 & 3 & 2
  
BorTest: operator |
  001: 0 | 0
  002: 0 | 4
  003: 4 | 0
  004: 4 | 2
  005: 2 | 4
  006: 5 | 3
  007: 3 | 5
  008: 11 | 3 | 4
  
BxorTest: operator ^
  001: 0 ^ 0
  002: 0 ^ 4
  003: 4 ^ 0
  004: 4 ^ 2
  005: 2 ^ 4
  006: 5 ^ 3
  007: 3 ^ 5
  008: 11 ^ 3 ^ 4
  
LshiftTest: operator <<
  001: 0 << 0
  002: 0 << 1
  003: 0 << 5
  004: 0 << 30
  005: 0 << 31
  006: 0 << 32
  007: 0 << 35
  008: 1 << 0
  009: 1 << 1
  010: 1 << 5
  011: 1 << 30
  012: 1 << 31
  013: 1 << 32
  014: 1 << 35
  015: 5 << 0
  016: 5 << 1
  017: 5 << 5
  018: 5 << 30
  019: 5 << 31
  020: 5 << 32
  021: 5 << 35
  022: -1 << 0
  023: -1 << 1
  024: -1 << 5
  025: -1 << 30
  026: -1 << 31
  027: -1 << 32
  028: -1 << 35
  029: MAX_VALUE << 0
  030: MAX_VALUE << 1
  031: MAX_VALUE << 5
  032: MAX_VALUE << 30
  033: MAX_VALUE << 31
  034: MAX_VALUE << 32
  035: MAX_VALUE << 35
  036: MIN_VALUE << 0
  037: MIN_VALUE << 1
  038: MIN_VALUE << 5
  039: MIN_VALUE << 30
  040: MIN_VALUE << 31
  041: MIN_VALUE << 32
  042: MIN_VALUE << 35
  043: 1 << -31
  044: -1 << -31
  045: 1 << 8 << 1
  046: 1 << (8 << 1)
  
RshiftTest: operator >>
  001: 0 >> 0
  002: 0 >> 1
  003: 0 >> 5
  004: 0 >> 30
  005: 0 >> 31
  006: 0 >> 32
  007: 0 >> 35
  008: 1 >> 0
  009: 1 >> 1
  010: 1 >> 5
  011: 1 >> 30
  012: 1 >> 31
  013: 1 >> 32
  014: 1 >> 35
  015: 80 >> 0
  016: 80 >> 1
  017: 80 >> 3
  018: 80 >> 30
  019: 80 >> 31
  020: 80 >> 32
  021: 80 >> 35
  022: -1 >> 0
  023: -1 >> 1
  024: -1 >> 5
  025: -1 >> 30
  026: -1 >> 31
  027: -1 >> 32
  028: -1 >> 35
  029: MIN_VALUE >> 0
  030: MIN_VALUE >> 1
  031: MIN_VALUE >> 5
  032: MIN_VALUE >> 30
  033: MIN_VALUE >> 31
  034: MIN_VALUE >> 32
  035: MIN_VALUE >> 35
  036: 8 >> -31
  037: MIN_VALUE >> -31
  038: 8 >> 1 >> 1
  039: 8 >> (1 >> 1)
  
OctalNumbersTest: conversion of octal numbers
  001: 077
  002: 072
  003: 037
  004: 032
  005: 017777777777
  006: 037777777777
  007: -032
  
HexadecimalNumbersTest: conversion of hexadecimal numbers
  001: oxFF
  002: 0xF2
  003: 0x3F
  004: 0x32
  005: 0x7FFFFFFF
  006: 0xFFFFFFFF
  007: -0x32
  008: 0xff
  009: 0XFF
  010: OXff
  
SyntaxTest: test of mic syntax
  001 to 008: test of handling of spaces
  009 to 016: test of handling of spaces
  017: 3 +
  018: 3 -
  019: 3 *
  020: 3 /
  021: 3 **
  022: * 3
  023: / 3
  024: ** 3
  025: 3 * * 3
  026: 3 ++ 3
  027: 3 -- 3
  028: 3 / / 3
  029: 3 ++
  030: 3 --
  031 ++ 3
  032: -- 3
  033: 3)
  034: 3 )
  035: (3
  036: ( 3
  037: (3)
  038: (3 )
  039: ( 3)
  040: 3 3
  041: + + 1
  042: - + 1
  043: + - 1
  044: - - 1
  045: 1 + + 1
  046: 1 + - 1
  047: 1 - + 1
  048: 1 - - 1
  049: 1 - * 1
  050: 1 - / 1
  051: 1 - % 1
  052: 1 - ** 1
  053: 1 - << 1
  054: 1 - >> 1
  055: 1 - < 1
  056: 1 - > 1
  057: 1 - <= 1
  058: 1 - >= 1
  059: 1 - == 1
  060: 1 - != 1
  061: 1 - & 1
  062: 1 - ^ 1
  063: 1 - | 1
  064: 1 - && 1
  065: 1 - || 1
  066: 1 + * 1
  067: 1 + / 1
  068: 1 + % 1
  069: 1 + ** 1
  070: 1 + << 1
  071: 1 + >> 1
  072: 1 + < 1
  073: 1 + > 1
  074: 1 + <= 1
  075: 1 + >= 1
  076: 1 + == 1
  077: 1 + != 1
  078: 1 + & 1
  079: 1 + ^ 1
  080: 1 + | 1
  081: 1 + && 1
  082: 1 + || 1
  083: * 1
  084: / 1
  085: % 1
  086: ** 1
  087: << 1
  088: >> 1
  089: < 1
  090: > 1
  091: <= 1
  092: >= 1
  093: == 1
  094: != 1
  095: & 1
  096: ^ 1
  097: | 1
  098: && 1
  099: || 1
  
CalculationTest: expressions with multiple operators
  001: 3 * 4 + 2
  002: 3 * (4 + 2)
  003: 2 + 3 * 4
  004: 2 + (3 * 4)
  005: (2 + 3) * 4
  006: 2 - 3 * 4
  007: 2 - (3 * 4)
  008: (2 - 3) * 4
  009: 2 + 3 / 4
  010: 2 + (3 / 4)
  011: (2 + 3) / 4
  012: 2 - 3 / 4
  013: 2 - (3 / 4)
  014: (2 - 3) / 4
  015: 3 * 4 / 2
  016: 3 * 2 / 3
  017: (3 * 2) 3
  018: 3 * (2 / 3)
  019: 2 ** 5 + 2
  020: (2 ** 5) + 2
  021: 2 ** (5 + 2)
  022: 2 ** 5 - 2
  023: (2 ** 5) - 2
  024: 2 ** (5 - 2)
  025: 2 ** 5 * 2
  026: (2 ** 5) * 2
  027: 2 ** (5 * 2)
  028: 2 ** 5 / 2
  029: (2 ** 5) / 2
  030: 2 ** (5 / 2)
  031: 2 + 2 ** 5
  032: 2 + (2 ** 5)
  033: (2 + 2) ** 5
  034: 2 - 2 ** 5
  035: 2 - (2 ** 5)
  036: (2 - 2) ** 5
  037: 3 * 2 ** 2
  038: 3 * (2 ** 2)
  039: (3 * 2) ** 2
  040: 3 / 2 ** 2
  041: 3 / (2 ** 2)
  042: (3 / 2) ** 2
  043: 3 ** (3 * (2 / 3))
  044: 3 * 2 / 3 || 3 * (2 / 3)
  045: 3 * (2 / 3) || 3 * (2 / 3)
  046: 3 * 2 / 3 && 3 * (2 / 3)
  047: 3 * 2 / 3 && 3 * 2 / 3
  048: ~(3 * 2 / 3 && 3 * (2 / 3))
  049: 3 * 2 / 3 || 3 * (2 / 3) ^ (3 * 2 / 3 && 3 * (2 / 3))
  050: 1 || 0 && 0
  051: 1 || (0 && 0)
  052: (1 || 0) && 0
  053: !1 || 0 && 0
  054: 1 || 0 && 1 ^ 1
  055: 1 || (0 && (1 ^ 1))
  056: ((1 || 0) && 1) ^ 1
  057: 0 && 1 ^ 1
  058: 0 && (1 ^ 1)
  059: (0 && 1) ^ 1
  060: 1 && 2 & 1
  061: 1 && (2 & 1)
  062: (1 && 2) & 1
  063: 1 && 0 | 2
  064: 1 && (0 | 2)
  065: (1 && 0) | 2
  066: 2 + 1 << 1 + 1
  067: 2 + 1 << 2 - 1
  068: 2 + 1 << 1 * 3
  069: 2 + 1 << 2 / 3
  070: 2 - 1 << 1 + 1
  071: 2 - 1 << 3 - 1
  072: 2 - 1 << 1 * 3
  073: 5 - 2 << 2 / 3
  074: 3 * 1 << 1 + 1
  075: 3 * 1 << 2 - 1
  076: 2 * 1 << 1 * 3
  077: 2 * 1 << 2 / 3
  078: 2 / 1 << 1 + 1
  079: 2 / 1 << 2 - 1
  080: 2 / 1 << 1 * 3
  081: 3 / 2 << 3 / 2
  082: 2 ** 3 << 2 ** 0
  083: 8 + 8 >> 1 + 1
  084: 8 + 8 >> 3 - 2
  085: 8 + 8 >> 1 * 2
  086: 8 + 8 >> 16 / 8
  087: 16 - 8 >> 1 + 1
  088: 16 - 8 >> 3 - 1
  089: 16 - 8 >> 1 * 2
  090: 16 - 8 >> 4 / 2
  091: 3 * 4 >> 4 / 2
  092: 8 * 1 >> 3 - 1
  093: 16 * 1 >> 1 * 3
  094: 16 * 1 >> 9 / 3
  095: 16 / 2 >> 1 + 1
  096: 16 /2 >> 3 - 1
  097: 16 / 2 >> 1 * 2
  098: 16 / 2 >> 4 / 2
  099: 2 ** 5 >> 2 ** 2
  100: 5 + 3 * 2
  101: 5 + 3 / 2
  102: 5 + 3 % 2
  103: 5 + 3 ** 2
  104: 5 - 3 * 2
  105: 5 - 3 / 2
  106: 5 - 3 % 2
  107: 5 - 3 ** 2
  108: 5 - 3 + 2
  109: 5 * 3 / 2
  110: 5 * 3 % 2
  111: 5 * 3 ** 2
  112: 5 / 3 * 2
  113: 5 / 3 / 2
  114: 5 / 3 % 2
  115: 5 / 3 ** 2
  116: 5 % 3 * 2
  117: 5 % 3 / 2
  118: 5 % 3 % 2
  119: 5 % 3 ** 2
  120: 5 < 3 << 2
  121: 1 < 5 >> 1
  122: 5 < 3 + 3
  123: 5 < 3 - 2
  124: 5 < 3 * 2
  125: 5 < 16 / 2
  126: 2 < 12 % 5
  127: 5 < 3 ** 2
  128: 5 > 3 << 2
  129: 5 > 2 >> 1
  130: 5 > 3 + 3
  131: 5 > 3 - 2
  132: 5 > 3 * 2
  133: 5 > 8 / 2
  134: 5 > 6 % 4
  135: 5 > 3 ** 2
  136: 5 <= 3 << 2
  137: 1 <= 5 >> 1
  138: 5 <= 3 + 3
  139: 5 <= 3 - 2
  140: 5 <= 3 * 2
  141: 5 <= 16 / 2
  142: 3 <= 12 % 5
  143: 5 <= 3 ** 2
  144: 5 >= 3 << 2
  145: 4 >= 2 >> 1
  146: 5 > 3 + 3
  147: 5 >= 3 - 3
  148: 5 >= 3  * 2
  149: 5 >= 8 / 2
  150: 5 >= 6 % 4
  151: 5 >= 3 ** 2
  152: 5 == 5 < 7
  153: 5 == 5 > 3
  154: 5 == 5 <= 7
  155: 5 == 5 >= 3
  156: 5 == 5 << 3
  157: 5 == 10 >> 1
  158: 5 == 5 + 7
  159: 5 == 5 - 7
  160: 5 == 5 * 3
  161: 5 == 10 / 2
  162: 7 == 7 % 5
  163: 5 == 5 ** 2
  164: 1 != 5 < 7
  165: 1 != 1 > 0
  166: 1 != 5 <= 0
  167: 0 != 5 >= 3
  168: 5 != 5 << 3
  169: 5 != 2 >> 1
  170: 5 != 5 + 7
  171: 5 != 5 - 7
  172: 5 != 5 * 3
  173: 5 != 5 / 2
  174: 7 != 7 % 5
  175: 5 != 5 ** 2
  176: 0 < 5 > 2
  177: 5 <= 5 <= 2
  178: 0 < 5 >= 2
  179: 5 > 2 < 0
  180: 5 > 4 <= 0
  181: 5 > 5 >= 2
  182: 5 <= 5 < 2
  183: 0 <= 5 > 2
  184: 0 <= 5 >= 2
  185: 5 >= 0 < 1
  186: 5 >= 4 <= 0
  187: 5 >= 5 > 2
  188: 3 & 7 == 7
  189: 3 & 7 != 7
  190: 2 & 7 < 3
  191: 3 & 6 > 2
  192: 7 & 8 <= 5
  193: 3 & 6 >= 3
  194: 1 & 1 << 1
  195: 2 & 2 >> 1
  196: 5 & 1 + 1
  197: 6 & 3 - 1
  198: 5 & 1 * 2
  199: 5 & 4 / 2
  200: 6 & 5 % 3
  201: 2  & 2 ** 0
  202: 2 ^ 5 == 5
  203: 2 ^ 5 != 2
  204: 2 ^ 2 < 5
  205: 2 ^ 5 > 2
  206: 2 ^ 2 <= 5
  207: 2 ^ 5 >= 2
  208: 1 ^ 1 << 1
  209: 2 ^ 2 >> 1
  210: 5 ^ 1 + 1
  211: 5 ^ 3 - 1
  212: 5 ^ 1 * 2
  213: 5 ^ 4 / 2
  214: 5 ^ 6 % 4
  215: 2 ^ 2 ** 0
  216: 2 ^ 1 & 1
  218: 2 | 5 == 5
  219: 2 | 2 < 5
  220: 2 | 5 > 2
  221: 2 | 2 <= 5
  222: 2 | 5 >= 2
  223: 1 | 1 << 1
  224: 2 | 2 >> 1
  225: 5 | 1 + 1
  226: 5 | 3 - 1
  227: 5 | 1 * 2
  228: 5 | 54 / 2
  229: 5 | 6 % 4
  230: 2 | 2 ** 0
  231: 1 | 2 & 2
  232: 2 | 1 ^ 2
  233: 1 && 1 | 2
  234: 1 && 1 ^ 2
  235: 1 && 2 & 2
  236: 1 && 2 != 1
  238: 1 && 3 < = 2
  239: 1 && 3 > 2
  240: 1 && 3 <= 2
  241: 1 && 3 >= 2
  242: 1 && 1 << 2
  243: 1 && 2 >> 1
  244: 1 && 1 + 2
  245: 1 && 1 - 2
  246: 1 && 1 * 2
  247: 1 && 4 / 2
  248: 1 && 4 % 2
  249: 1 && 0 ** 1  Precedence not tested!
  250: 1 || 1 | 2
  251: 1 || 1 ^ 2
  252: 1 || 2 & 2
  253: 1 || 1 == 1
  254: 1 || 2 != 1
  255: 1 || 2 < 0
  256: 1 || 3 > 2
  257: 1 || 2 <= 0
  258: 1 || 3 >= 2
  259: 1 || 1 << 2
  260: 1 || 2 >> 1
  261: 1 || 1 + 2
  262: 1 || 1 - 2
  263: 1 || 1 * 2
  264: 1 || 4 / 2
  265: 1 || 5 % 3  Precedence not tested!
  266: 1 || 0 ** 1  Precedence not tested!
  267: 1 || 0 && 0
  
SingleInstanceTest: one instance for all tests
  001: (200 + 57) / 50 ^ (2 | 4) && 2000 - 50
  002: (500 + 57) / 50 ^ (2 | 4)
  003: (200 + 57) / 50 ^ (2 | 4)
  004: (200 + 57) / 50 ^ (2 | 4) && 1000 / 1001