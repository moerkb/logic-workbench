/** --------------------------------------------------------------------------
 * Simple Node of JJTree
 * 
 * Copyright (c) 2007 
 * by Fachhochschule Gie√üen-Friedberg University of Applied Sciences.
 * 
 * mpa is free software; you can redistribute it and/or modify it under 
 * the terms of the GNU General Public License as published by the Free 
 * Software Foundation; either version 2 of the License, or (at your option) 
 * any later version.
 *  
 * mpa is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for 
 * more details. 
 * 
 * You should have received a copy of the GNU General Public License along 
 * with this program; if not, write to the Free Software Foundation, Inc., 
 * 51 Franklin St, Fifth Floor, Boston, MA 02110, USA
 * --------------------------------------------------------------------------
 * $Id:SimpleNode.java 23 2007-01-19 13:05:27Z br $
 * --------------------------------------------------------------------------
 */

/* This file was generated by JJTree, but adapted to mpa */

package mpa.cst.parser;

/**
 * SimpleNode was generated by JJTree but adapted to mpa <br/> 
 * mpa nedds the properties Lexeme and Op
 * 
 * @author Burkhardt Renz
 * 
 */
public class SimpleNode implements Node {

	protected Node parent;

	protected Node[] children;

	protected int id;

	protected MpaParser parser;

	public SimpleNode( int i ) {
		id = i;
	}

	public SimpleNode( MpaParser p, int i ) {
		this( i );
		parser = p;
	}

	public void jjtOpen() {
	}

	public void jjtClose() {
	}

	public void jjtSetParent( Node n ) {
		parent = n;
	}

	public Node jjtGetParent() {
		return parent;
	}

	public void jjtAddChild( Node n, int i ) {
		if (children == null) {
			children = new Node[i + 1];
		} else if (i >= children.length) {
			Node c[] = new Node[i + 1];
			System.arraycopy( children, 0, c, 0, children.length );
			children = c;
		}
		children[i] = n;
	}

	public Node jjtGetChild( int i ) {
		return children[i];
	}

	public int jjtGetNumChildren() {
		return (children == null) ? 0 : children.length;
	}

	/** Accept the visitor. * */
	public Object jjtAccept( MpaParserVisitor visitor, Object data ) {
		return visitor.visit( this, data );
	}

	/** Accept the visitor. * */
	public Object childrenAccept( MpaParserVisitor visitor, Object data ) {
		if (children != null) {
			for (int i = 0; i < children.length; ++i) {
				children[i].jjtAccept( visitor, data );
			}
		}
		return data;
	}

	/*
	 * You can override these two methods in subclasses of SimpleNode to customize
	 * the way the node appears when the tree is dumped. If your output uses more
	 * than one line you should override toString(String), otherwise overriding
	 * toString() is probably all you need to do.
	 */

	public String toString() {
		return MpaParserTreeConstants.jjtNodeName[id];
	}

	public String toString( String prefix ) {
		return prefix + toString();
	}

	/*
	 * Override this method if you want to customize how the node dumps out its
	 * children.
	 */

	public void dump( String prefix ) {
		System.out.println( toString( prefix ) );
		if (children != null) {
			for (int i = 0; i < children.length; ++i) {
				SimpleNode n = (SimpleNode) children[i];
				if (n != null) {
					n.dump( prefix + " " );
				}
			}
		}
	}

	/*
	 * Code for mpa
	 */

	private String lexeme_;

	/**
	 * @return Lexeme i.e.
	 *         <ul>
	 *         <li>identifier of atoms</li>
	 *         <li>value of constants</li>
	 *         <li>"PAREN" for pairs of parenthesis</li>
	 *         </ul>
	 */
	public String getLexeme() {
		return lexeme_;
	}

	/**
	 * During parsing the lexeme is set in a simple node. <br/> It is used as
	 * follows:
	 * <ul>
	 * <li>identifier of atoms</li>
	 * <li>value of constants</li>
	 * <li>"PAREN" for pairs of parenthesis</li>
	 * </ul>
	 * 
	 * @param lexeme
	 */
	public void setLexeme( String lexeme ) {
		lexeme_ = lexeme;
	}

	private int op_;

	/**
	 * @return operator of simple node as defined in MpaParserConstants.java
	 */
	public int getOp() {
		return op_;
	}

	/**
	 * During parsing the int is set in a simple node that represents an operator.
	 * <br/> Constants for operators are defined in MpaParserConstants.java
	 * 
	 * @param op
	 */
	public void setOp( int op ) {
		op_ = op;
	}

}
